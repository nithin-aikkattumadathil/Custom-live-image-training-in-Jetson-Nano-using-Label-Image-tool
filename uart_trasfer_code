#!/usr/bin/python3 program that combines object detection and UART communication on an NVIDIA Jetson device
import time
import serial         #serial` for UART communication,
import cv2            # OpenCV for video capture
import subprocess     #`subprocess for running the detectnet` command, 
import threading      #threading` for managing concurrent execution
import queue          #queue` for passing data between threads.
import re

# Function to read from detectnet process and send results to UART
def read_detectnet_output(process, uart_queue):
    while True:
        line = process.stdout.readline()
        if not line:
            break
        # Process the detectnet output as needed
        # Extract the detected object's name and send it over UART
        detected_object_name = line.strip()  # No need to decode a string
        uart_queue.put(detected_object_name)

# Function to handle UART communication
def uart_communication(uart_queue):
    serial_port = serial.Serial(
        port="/dev/ttyTHS1",
        baudrate=115200,
        bytesize=serial.EIGHTBITS,
        parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE,
    )

    try:
        while True:
            # Check if there's a detected object name in the queue
            if not uart_queue.empty():
                detected_object_name = uart_queue.get()
                detected_object_name = re.sub(r'[^a-zA-Z]', ' ', detected_object_name).strip()
                # Remove unwanted words and characters
                detected_object_name = detected_object_name.replace("detected", "").replace("objects", "").replace("obj", "").replace("class", "").replace("confidence", "").strip()
                detected_object_name = re.sub(r'=([\d.]+)', '', detected_object_name).strip()
                # Skip lines that start with "[TRT]" or contain "bounding"
                if not detected_object_name.startswith("[TRT]") and "bounding" not in detected_object_name and "TRT" not in detected_object_name:
                    serial_port.write(detected_object_name.encode() + b"\r\n")
                # Add a delay if needed
                #time.sleep(1)

    except KeyboardInterrupt:
        print("Exiting UART Communication")

    except Exception as exception_error:
        print("UART Communication Error occurred. Exiting Program")
        print("Error: " + str(exception_error))

    finally:
        serial_port.close()

if __name__ == "__main__":
    print("Object Detection and UART Communication Program")

    # Create a queue for passing detected object names between threads
    uart_queue = queue.Queue()

    # Start the UART communication thread
    uart_thread = threading.Thread(target=uart_communication, args=(uart_queue,))
    uart_thread.start()

    # Start the detectnet command in the background
    detectnet_process = subprocess.Popen(
        "detectnet --model=models/traffic/ssd-mobilenet.onnx --labels=models/traffic/labels.txt --input-blob=input_0 --output-cvg=scores --output-bbox=boxes /dev/video0",
        stdout=subprocess.PIPE,
        shell=True,
        universal_newlines=True,
    )

    # Start a thread to read the output of the detectnet command
    detectnet_thread = threading.Thread(target=read_detectnet_output, args=(detectnet_process, uart_queue))
    detectnet_thread.start()

    # The object detection and UART communication threads will run concurrently
    uart_thread.join()
    detectnet_thread.join()
